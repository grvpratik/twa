// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { jwtVerify } from 'jose'

// This function can be marked `async` if using `await` inside
export async function middleware(request: NextRequest) {
    const token = request.nextUrl.searchParams.get('token')

    // If there's no token, redirect to an error page
    if (!token) {
        return NextResponse.redirect(new URL('/error?message=No token provided', request.url))
    }

    try {
        // Verify the token
        const secret = new TextEncoder().encode(
            process.env.JWT_SECRET || 'cc7e0d44fd473002f1c42167459001140ec6389b7353f8088f4d9a95f2f596f2'
        )
        const { payload } = await jwtVerify(token, secret)

        // If verification is successful, attach the payload to the request
        // so it can be accessed in the page component
        const requestHeaders = new Headers(request.headers)
        requestHeaders.set('x-payload', JSON.stringify(payload))

        return NextResponse.next({
            request: {
                headers: requestHeaders,
            },
        })
    } catch (error) {
        // If verification fails, redirect to an error page
        console.error('Token verification failed:', error)
        return NextResponse.redirect(new URL('/error?message=Invalid token', request.url))
    }
}

// See "Matching Paths" below to learn more
export const config = {
    matcher: '/payment',
}

// pages/error.tsx
